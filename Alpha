#json message empfangen, dekodiert in python dictionary,
#alpha wert aufgenommen/ rausgefilter + zur liste hinzugefügt, liste nach 10s abgebrochen, durschnitt ermittelt


import json 
import socket 
#importieren und initialisieren von pygame
import pygame
from pygame.locals import*.
pygame.init()

#variablen/konstanten für pygame fenter setzen
W, H = 800, 600
FPS = 30
SCHWARZ = (0,0,0)
WEISS = (255, 255, 255)
GRAU = (155, 155, 155)
spielaktiv = true
frame = 0

#Öffnen neuen Fensters
fenster = pygame.display.set_mode((W, H))
clock = pygame.time.Clock()

# Konfiguration
HOST = '127.0.0.1'  # Lokal laut GUI 
PORT = 12345        # Port laut GUI
BUFFER_SIZE = 1024

# Durchschnittsberechnung
def calculate_average_alpha():
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # socket ist bereit daten zu empfangen
    udp_socket.bind((HOST, PORT)) 

    alpha_values = [] # liste in der alle aufgenommenen daten gespeichert werden

    for schleifenvariable in range(100):  # Empfange exakt 100 Pakete
        data, schleifenvariable = udp_socket.recvfrom(BUFFER_SIZE) # ist udp packet vom netzwerkstream und fängt daten auf 
        message = json.loads(data.decode('utf-8')) # daten als json stream geliefert und in python objekt konvertiert

        # Alpha-Wert bei Index 2 hinzufügen
        alpha_values.append(message["data"][2]) # gibt wert der liste zurük, nimmt zweiten index raus(nur alpha), bekommt packet und nimmt sich alphawert und fügt ihn am ende der liste hinzu

    udp_socket.close()

    # Durchschnitt berechnen
    return sum(alpha_values) / len(alpha_values)

# Hauptprogramm
alpha_average = calculate_average_alpha()
print(f"Durchschnitt der Alpha-Werte: {alpha_average:.6f}")

#zweiten datenstream empfangen, mit durchschnitt vergleichen und bilder anzeigen

#bilder importieren

ballon = ['','','']
ballon[0] = pygame.image.load("Ballon1.jpeg")
ballon[1] = pygame.image.load("Ballon2.jpeg")
ballon[2] = pygame.image.load("Ballon3.jpeg")

while spielaktiv:
    #überprüfen, ob NUtzer ein e Aktion durchgeführt hat
    for event in pygme.event.get():
        #Beenden bei [ESC] oder [X]
        if event.type==QUIT or (event.type==KEDOWN and event.key==K_ESCAPE):
            spielaktiv = false

#neuer stream empfangen

udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # socket ist bereit daten zu empfangen
    udp_socket.bind((HOST, PORT)) 

    alpha_values = [] # liste in der alle aufgenommenen daten gespeichert werden

    for schleifenvariable in range(100):  # Empfange exakt 100 Pakete
        data, schleifenvariable = udp_socket.recvfrom(BUFFER_SIZE) # ist udp packet vom netzwerkstream und fängt daten auf 
        message = json.loads(data.decode('utf-8')) # daten als json stream geliefert und in python objekt konvertiert

        # Alpha-Wert bei Index 2 hinzufügen
        alpha_values.append(message["data"][2]) # gibt wert der liste zurük, nimmt zweiten index raus(nur alpha), bekommt packet und nimmt sich alphawert und fügt ihn am ende der liste hinzu

        #"spiel" beginnt, also bilder werden angezeigt
        while spelaktiv:
            #überprüfen, ob Nutzer eine Aktion durchgeführt hat
               for event in pygame.event.get():
                #Beenden bei [ESC] oder [X]
                if event.type==QUIT or (event.type==KEDOWN and event.key==K_ESCAPE):
                    spielaktiv = false

            frame = 0 #frame o bedeutet, luftballon ist im normalzustand
            fenster.blit(biene[frame], (10, 10))
            pygame.display.flip()
            clock.tick(FPS)

            if alpha_values > alpha_average*1.1:
                frame = 1 #frame 1 bedeutet, ballon ist nahe spikes
                fenster.blit(biene[frame], (10, 10))
                pygame.display.flip()
                clock.tick(FPS)

            if alpha_values > alpha.average*1.2:
                frame = 2 #frame 2 bedeutet, ballon ist zerplatzt
                fenster.blit(biene[frame], (10, 10))
                pygame.display.flip()
                clock.tick(FPS)

	if alpha_values<alpha.average:
		frame = 0 #bedeutet, ballon ist im normalzustand=
                fenster.blit(biene[frame], (10, 10))
                pygame.display.flip()
                clock.tick(FPS)
                

            

    udp_socket.close()


